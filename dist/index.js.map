{
  "version": 3,
  "sources": ["../lib/base.js", "../lib/dlacpy.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major' );\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar min = require( '@stdlib/math-base-special-fast-min' );\n\n\n// FUNCTIONS //\n\n/**\n* Copies all of a matrix `A` to another matrix `B`.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows in matrix `A`\n* @param {NonNegativeInteger} N - number of columns in matrix `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} B - output matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @returns {Float64Array} `B`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, 2, 1, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, 2, -1, 1, B, 2, 1, 0 );\n* // B => <Float64Array>[ 2.0, 1.0, 4.0, 3.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, -2, 1, 2, B, 2, 1, 0 );\n* // B => <Float64Array>[ 3.0, 4.0, 1.0, 2.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, -2, -1, 3, B, 2, 1, 0 );\n* // B => <Float64Array>[ 4.0, 3.0, 2.0, 1.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, 1, 2, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 3.0, 2.0, 4.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, -1, 2, 1, B, 2, 1, 0 );\n* // B => <Float64Array>[ 2.0, 4.0, 1.0, 3.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, 1, -2, 2, B, 2, 1, 0 );\n* // B => <Float64Array>[ 3.0, 1.0, 4.0, 2.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, -1, -2, 3, B, 2, 1, 0 );\n* // B => <Float64Array>[ 4.0, 2.0, 3.0, 1.0 ]\n*/\nfunction copyAll( M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB ) {\n\tvar da0;\n\tvar da1;\n\tvar db0;\n\tvar db1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sa;\n\tvar sb;\n\tvar ia;\n\tvar ib;\n\tvar i0;\n\tvar i1;\n\tvar o;\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( [ M, N ], [ strideA1, strideA2 ], [ strideB1, strideB2 ] );\n\tsh = o.sh;\n\tsa = o.sx;\n\tsb = o.sy;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tS1 = sh[ 1 ];\n\tda0 = sa[ 0 ];\n\tda1 = sa[ 1 ] - ( S0*sa[0] );\n\tdb0 = sb[ 0 ];\n\tdb1 = sb[ 1 ] - ( S0*sb[0] );\n\n\t// Set the pointers to the first indexed elements in the respective matrices...\n\tia = offsetA;\n\tib = offsetB;\n\n\t// Iterate over the matrix dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tB[ ib ] = A[ ia ];\n\t\t\tia += da0;\n\t\t\tib += db0;\n\t\t}\n\t\tia += da1;\n\t\tib += db1;\n\t}\n\treturn B;\n}\n\n/**\n* Copies the upper triangular/trapezoidal part of a matrix `A` to another matrix `B`.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows in matrix `A`\n* @param {NonNegativeInteger} N - number of columns in matrix `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} B - output matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @returns {Float64Array} `B`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, 2, 1, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 2.0, 0.0, 4.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, 2, -1, 1, B, 2, 1, 0 );\n* // B => <Float64Array>[ 2.0, 1.0, 0.0, 3.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, -2, 1, 2, B, 2, 1, 0 );\n* // B => <Float64Array>[ 3.0, 4.0, 0.0, 2.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, -2, -1, 3, B, 2, 1, 0 );\n* // B => <Float64Array>[ 4.0, 3.0, 0.0, 1.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, 1, 2, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 3.0, 0.0, 4.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, -1, 2, 1, B, 2, 1, 0 );\n* // B => <Float64Array>[ 2.0, 4.0, 0.0, 3.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, 1, -2, 2, B, 2, 1, 0 );\n* // B => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, -1, -2, 3, B, 2, 1, 0 );\n* // B => <Float64Array>[ 4.0, 2.0, 0.0, 1.0 ]\n*/\nfunction copyUpper( M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB ) {\n\tvar ia;\n\tvar ib;\n\tvar i0;\n\tvar i1;\n\n\tia = offsetA;\n\tib = offsetB;\n\tif ( isRowMajor( [ strideA1, strideA2 ] ) ) {\n\t\tfor ( i1 = 0; i1 < M; i1++ ) {\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tB[ ib+(i0*strideB2) ] = A[ ia+(i0*strideA2) ];\n\t\t\t}\n\t\t\tia += strideA1;\n\t\t\tib += strideB1;\n\t\t}\n\t\treturn B;\n\t}\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tfor ( i0 = 0; i0 <= min( i1, M-1 ); i0++ ) {\n\t\t\tB[ ib+(i0*strideB1) ] = A[ ia+(i0*strideA1) ];\n\t\t}\n\t\tia += strideA2;\n\t\tib += strideB2;\n\t}\n\treturn B;\n}\n\n/**\n* Copies the lower triangular/trapezoidal part of a matrix `A` to another matrix `B`.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows in matrix `A`\n* @param {NonNegativeInteger} N - number of columns in matrix `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} B - output matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @returns {Float64Array} `B`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, 2, 1, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 0.0, 3.0, 4.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, 2, -1, 1, B, 2, 1, 0 );\n* // B => <Float64Array>[ 2.0, 0.0, 4.0, 3.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, -2, 1, 2, B, 2, 1, 0 );\n* // B => <Float64Array>[ 3.0, 0.0, 1.0, 2.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, -2, -1, 3, B, 2, 1, 0 );\n* // B => <Float64Array>[ 4.0, 0.0, 2.0, 1.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, 1, 2, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 0.0, 2.0, 4.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, -1, 2, 1, B, 2, 1, 0 );\n* // B => <Float64Array>[ 2.0, 0.0, 1.0, 3.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, 1, -2, 2, B, 2, 1, 0 );\n* // B => <Float64Array>[ 3.0, 0.0, 4.0, 2.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, -1, -2, 3, B, 2, 1, 0 );\n* // B => <Float64Array>[ 4.0, 0.0, 3.0, 1.0 ]\n*/\nfunction copyLower( M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB ) {\n\tvar ia;\n\tvar ib;\n\tvar i0;\n\tvar i1;\n\n\tia = offsetA;\n\tib = offsetB;\n\tif ( isRowMajor( [ strideA1, strideA2 ] ) ) {\n\t\tfor ( i1 = 0; i1 < M; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 <= min( i1, N-1 ); i0++ ) {\n\t\t\t\tB[ ib+(i0*strideB2) ] = A[ ia+(i0*strideA2) ];\n\t\t\t}\n\t\t\tia += strideA1;\n\t\t\tib += strideB1;\n\t\t}\n\t\treturn B;\n\t}\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tfor ( i0 = i1; i0 < M; i0++ ) {\n\t\t\tB[ ib+(i0*strideB1) ] = A[ ia+(i0*strideA1) ];\n\t\t}\n\t\tia += strideA2;\n\t\tib += strideB2;\n\t}\n\treturn B;\n}\n\n\n// MAIN //\n\n/**\n* Copies all or part of a matrix `A` to another matrix `B`.\n*\n* @private\n* @param {string} uplo - specifies whether to copy the upper or lower triangular/trapezoidal part of matrix `A`\n* @param {NonNegativeInteger} M - number of rows in matrix `A`\n* @param {NonNegativeInteger} N - number of columns in matrix `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} B - output matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @returns {Float64Array} `B`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* dlacpy( 'all', 2, 2, A, 2, 1, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* dlacpy( 'upper', 2, 2, A, 2, 1, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 2.0, 0.0, 4.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* dlacpy( 'lower', 2, 2, A, 2, 1, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 0.0, 3.0, 4.0 ]\n*/\nfunction dlacpy( uplo, M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB ) {\n\tif ( uplo === 'upper' ) {\n\t\treturn copyUpper( M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB );\n\t}\n\tif ( uplo === 'lower' ) {\n\t\treturn copyLower( M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB );\n\t}\n\treturn copyAll( M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dlacpy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLayout = require( '@stdlib/blas-base-assert-is-layout' );\nvar isColumnMajor = require( '@stdlib/ndarray-base-assert-is-column-major-string' );\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Copies all or part of a matrix `A` to another matrix `B`.\n*\n* @param {string} order - storage layout of `A` and `B`\n* @param {string} uplo - specifies whether to copy the upper or lower triangular/trapezoidal part of matrix `A`\n* @param {NonNegativeInteger} M - number of rows in matrix `A`\n* @param {NonNegativeInteger} N - number of columns in matrix `A`\n* @param {Float64Array} A - input matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} B - output matrix\n* @param {PositiveInteger} LDB - stride of the first dimension of `B` (a.k.a., leading dimension of the matrix `B`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {RangeError} sixth argument must be greater than or equal to `N`\n* @throws {RangeError} eighth argument must be greater than or equal to `N`\n* @returns {Float64Array} `B`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* dlacpy( 'row-major', 'all', 2, 2, A, 2, B, 2 );\n* // B => <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* dlacpy( 'row-major', 'upper', 2, 2, A, 2, B, 2 );\n* // B => <Float64Array>[ 1.0, 2.0, 0.0, 4.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* dlacpy( 'row-major', 'lower', 2, 2, A, 2, B, 2 );\n* // B => <Float64Array>[ 1.0, 0.0, 3.0, 4.0 ]\n*/\nfunction dlacpy( order, uplo, M, N, A, LDA, B, LDB ) {\n\tvar sa1;\n\tvar sa2;\n\tvar sb1;\n\tvar sb2;\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( isColumnMajor( order ) ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t\tsb1 = 1;\n\t\tsb2 = LDB;\n\t} else { // order === 'row-major'\n\t\tif ( LDA < N ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be greater than or equal to %d. Value: `%d`.', N, LDA ) );\n\t\t}\n\t\tif ( LDB < N ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be greater than or equal to %d. Value: `%d`.', N, LDB ) );\n\t\t}\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t\tsb1 = LDB;\n\t\tsb2 = 1;\n\t}\n\treturn base( uplo, M, N, A, sa1, sa2, 0, B, sb1, sb2, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dlacpy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Copies all or part of a matrix `A` to another matrix `B` using alternative indexing semantics.\n*\n* @param {string} uplo - specifies whether to copy the upper or lower triangular/trapezoidal part of matrix `A`\n* @param {NonNegativeInteger} M - number of rows in matrix `A`\n* @param {NonNegativeInteger} N - number of columns in matrix `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} B - output matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @returns {Float64Array} `B`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var B = new Float64Array( 6 );\n*\n* dlacpy( 'all', 2, 2, A, 2, 1, 1, B, 2, 1, 2 );\n* // B => <Float64Array>[ 0.0, 0.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var B = new Float64Array( 6 );\n*\n* dlacpy( 'upper', 2, 2, A, 2, 1, 1, B, 2, 1, 2 );\n* // B => <Float64Array>[ 0.0, 0.0, 2.0, 3.0, 0.0, 5.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var B = new Float64Array( 6 );\n*\n* dlacpy( 'lower', 2, 2, A, 2, 1, 1, B, 2, 1, 2 );\n* // B => <Float64Array>[ 0.0, 0.0, 2.0, 0.0, 4.0, 5.0 ]\n*/\nfunction dlacpy( uplo, M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB ) { // eslint-disable-line max-len, max-params\n\treturn base( uplo, M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = dlacpy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dlacpy = require( './dlacpy.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dlacpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dlacpy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* LAPACK routine to copy all or part of a matrix `A` to another matrix `B`.\n*\n* @module @stdlib/lapack-base-dlacpy\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dlacpy = require( '@stdlib/lapack-base-dlacpy' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* dlacpy( 'row-major', 'all', 2, 2, A, 2, B, 2 );\n* // B => <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dlacpy = require( '@stdlib/lapack-base-dlacpy' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var B = new Float64Array( 6 );\n*\n* dlacpy.ndarray( 'all', 2, 2, A, 2, 1, 1, B, 2, 1, 2 );\n* // B => <Float64Array>[ 0.0, 0.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dlacpy;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdlacpy = main;\n} else {\n\tdlacpy = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dlacpy;\n\n// exports: { \"ndarray\": \"dlacpy.ndarray\" }\n"],
  "mappings": "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",
  "names": ["require_base", "__commonJSMin", "exports", "module", "isRowMajor", "loopOrder", "min", "copyAll", "M", "N", "A", "strideA1", "strideA2", "offsetA", "B", "strideB1", "strideB2", "offsetB", "da0", "da1", "db0", "db1", "sh", "S0", "S1", "sa", "sb", "ia", "ib", "i0", "i1", "o", "copyUpper", "copyLower", "dlacpy", "uplo", "require_dlacpy", "__commonJSMin", "exports", "module", "isLayout", "isColumnMajor", "format", "base", "dlacpy", "order", "uplo", "M", "N", "A", "LDA", "B", "LDB", "sa1", "sa2", "sb1", "sb2", "require_ndarray", "__commonJSMin", "exports", "module", "base", "dlacpy", "uplo", "M", "N", "A", "strideA1", "strideA2", "offsetA", "B", "strideB1", "strideB2", "offsetB", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dlacpy", "ndarray", "join", "tryRequire", "isError", "main", "dlacpy", "tmp"]
}
