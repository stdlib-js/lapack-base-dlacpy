{"version":3,"file":"index.mjs","sources":["../lib/base.js","../lib/dlacpy.js","../lib/main.js","../lib/ndarray.js","../lib/index.js","../bfe07f563e88329ccac8f27fa2b980"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major';\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport min from '@stdlib/math-base-special-fast-min';\n\n\n// FUNCTIONS //\n\n/**\n* Copies all of a matrix `A` to another matrix `B`.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows in matrix `A`\n* @param {NonNegativeInteger} N - number of columns in matrix `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} B - output matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @returns {Float64Array} `B`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, 2, 1, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, 2, -1, 1, B, 2, 1, 0 );\n* // B => <Float64Array>[ 2.0, 1.0, 4.0, 3.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, -2, 1, 2, B, 2, 1, 0 );\n* // B => <Float64Array>[ 3.0, 4.0, 1.0, 2.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, -2, -1, 3, B, 2, 1, 0 );\n* // B => <Float64Array>[ 4.0, 3.0, 2.0, 1.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, 1, 2, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 3.0, 2.0, 4.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, -1, 2, 1, B, 2, 1, 0 );\n* // B => <Float64Array>[ 2.0, 4.0, 1.0, 3.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, 1, -2, 2, B, 2, 1, 0 );\n* // B => <Float64Array>[ 3.0, 1.0, 4.0, 2.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyAll( 2, 2, A, -1, -2, 3, B, 2, 1, 0 );\n* // B => <Float64Array>[ 4.0, 2.0, 3.0, 1.0 ]\n*/\nfunction copyAll( M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB ) {\n\tvar da0;\n\tvar da1;\n\tvar db0;\n\tvar db1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sa;\n\tvar sb;\n\tvar ia;\n\tvar ib;\n\tvar i0;\n\tvar i1;\n\tvar o;\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( [ M, N ], [ strideA1, strideA2 ], [ strideB1, strideB2 ] );\n\tsh = o.sh;\n\tsa = o.sx;\n\tsb = o.sy;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tS1 = sh[ 1 ];\n\tda0 = sa[ 0 ];\n\tda1 = sa[ 1 ] - ( S0*sa[0] );\n\tdb0 = sb[ 0 ];\n\tdb1 = sb[ 1 ] - ( S0*sb[0] );\n\n\t// Set the pointers to the first indexed elements in the respective matrices...\n\tia = offsetA;\n\tib = offsetB;\n\n\t// Iterate over the matrix dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tB[ ib ] = A[ ia ];\n\t\t\tia += da0;\n\t\t\tib += db0;\n\t\t}\n\t\tia += da1;\n\t\tib += db1;\n\t}\n\treturn B;\n}\n\n/**\n* Copies the upper triangular/trapezoidal part of a matrix `A` to another matrix `B`.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows in matrix `A`\n* @param {NonNegativeInteger} N - number of columns in matrix `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} B - output matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @returns {Float64Array} `B`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, 2, 1, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 2.0, 0.0, 4.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, 2, -1, 1, B, 2, 1, 0 );\n* // B => <Float64Array>[ 2.0, 1.0, 0.0, 3.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, -2, 1, 2, B, 2, 1, 0 );\n* // B => <Float64Array>[ 3.0, 4.0, 0.0, 2.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, -2, -1, 3, B, 2, 1, 0 );\n* // B => <Float64Array>[ 4.0, 3.0, 0.0, 1.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, 1, 2, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 3.0, 0.0, 4.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, -1, 2, 1, B, 2, 1, 0 );\n* // B => <Float64Array>[ 2.0, 4.0, 0.0, 3.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, 1, -2, 2, B, 2, 1, 0 );\n* // B => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyUpper( 2, 2, A, -1, -2, 3, B, 2, 1, 0 );\n* // B => <Float64Array>[ 4.0, 2.0, 0.0, 1.0 ]\n*/\nfunction copyUpper( M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB ) {\n\tvar ia;\n\tvar ib;\n\tvar i0;\n\tvar i1;\n\n\tia = offsetA;\n\tib = offsetB;\n\tif ( isRowMajor( [ strideA1, strideA2 ] ) ) {\n\t\tfor ( i1 = 0; i1 < M; i1++ ) {\n\t\t\tfor ( i0 = i1; i0 < N; i0++ ) {\n\t\t\t\tB[ ib+(i0*strideB2) ] = A[ ia+(i0*strideA2) ];\n\t\t\t}\n\t\t\tia += strideA1;\n\t\t\tib += strideB1;\n\t\t}\n\t\treturn B;\n\t}\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tfor ( i0 = 0; i0 <= min( i1, M-1 ); i0++ ) {\n\t\t\tB[ ib+(i0*strideB1) ] = A[ ia+(i0*strideA1) ];\n\t\t}\n\t\tia += strideA2;\n\t\tib += strideB2;\n\t}\n\treturn B;\n}\n\n/**\n* Copies the lower triangular/trapezoidal part of a matrix `A` to another matrix `B`.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows in matrix `A`\n* @param {NonNegativeInteger} N - number of columns in matrix `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} B - output matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @returns {Float64Array} `B`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, 2, 1, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 0.0, 3.0, 4.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, 2, -1, 1, B, 2, 1, 0 );\n* // B => <Float64Array>[ 2.0, 0.0, 4.0, 3.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, -2, 1, 2, B, 2, 1, 0 );\n* // B => <Float64Array>[ 3.0, 0.0, 1.0, 2.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, -2, -1, 3, B, 2, 1, 0 );\n* // B => <Float64Array>[ 4.0, 0.0, 2.0, 1.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, 1, 2, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 0.0, 2.0, 4.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, -1, 2, 1, B, 2, 1, 0 );\n* // B => <Float64Array>[ 2.0, 0.0, 1.0, 3.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, 1, -2, 2, B, 2, 1, 0 );\n* // B => <Float64Array>[ 3.0, 0.0, 4.0, 2.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* copyLower( 2, 2, A, -1, -2, 3, B, 2, 1, 0 );\n* // B => <Float64Array>[ 4.0, 0.0, 3.0, 1.0 ]\n*/\nfunction copyLower( M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB ) {\n\tvar ia;\n\tvar ib;\n\tvar i0;\n\tvar i1;\n\n\tia = offsetA;\n\tib = offsetB;\n\tif ( isRowMajor( [ strideA1, strideA2 ] ) ) {\n\t\tfor ( i1 = 0; i1 < M; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 <= min( i1, N-1 ); i0++ ) {\n\t\t\t\tB[ ib+(i0*strideB2) ] = A[ ia+(i0*strideA2) ];\n\t\t\t}\n\t\t\tia += strideA1;\n\t\t\tib += strideB1;\n\t\t}\n\t\treturn B;\n\t}\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tfor ( i0 = i1; i0 < M; i0++ ) {\n\t\t\tB[ ib+(i0*strideB1) ] = A[ ia+(i0*strideA1) ];\n\t\t}\n\t\tia += strideA2;\n\t\tib += strideB2;\n\t}\n\treturn B;\n}\n\n\n// MAIN //\n\n/**\n* Copies all or part of a matrix `A` to another matrix `B`.\n*\n* @private\n* @param {string} uplo - specifies whether to copy the upper or lower triangular/trapezoidal part of matrix `A`\n* @param {NonNegativeInteger} M - number of rows in matrix `A`\n* @param {NonNegativeInteger} N - number of columns in matrix `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} B - output matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @returns {Float64Array} `B`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* dlacpy( 'all', 2, 2, A, 2, 1, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* dlacpy( 'upper', 2, 2, A, 2, 1, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 2.0, 0.0, 4.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* dlacpy( 'lower', 2, 2, A, 2, 1, 0, B, 2, 1, 0 );\n* // B => <Float64Array>[ 1.0, 0.0, 3.0, 4.0 ]\n*/\nfunction dlacpy( uplo, M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB ) {\n\tif ( uplo === 'upper' ) {\n\t\treturn copyUpper( M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB );\n\t}\n\tif ( uplo === 'lower' ) {\n\t\treturn copyLower( M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB );\n\t}\n\treturn copyAll( M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB );\n}\n\n\n// EXPORTS //\n\nexport default dlacpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from '@stdlib/blas-base-assert-is-layout';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Copies all or part of a matrix `A` to another matrix `B`.\n*\n* @param {string} order - storage layout of `A` and `B`\n* @param {string} uplo - specifies whether to copy the upper or lower triangular/trapezoidal part of matrix `A`\n* @param {NonNegativeInteger} M - number of rows in matrix `A`\n* @param {NonNegativeInteger} N - number of columns in matrix `A`\n* @param {Float64Array} A - input matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} B - output matrix\n* @param {PositiveInteger} LDB - stride of the first dimension of `B` (a.k.a., leading dimension of the matrix `B`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {RangeError} sixth argument must be greater than or equal to `N`\n* @throws {RangeError} eighth argument must be greater than or equal to `N`\n* @returns {Float64Array} `B`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* dlacpy( 'row-major', 'all', 2, 2, A, 2, B, 2 );\n* // B => <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* dlacpy( 'row-major', 'upper', 2, 2, A, 2, B, 2 );\n* // B => <Float64Array>[ 1.0, 2.0, 0.0, 4.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* dlacpy( 'row-major', 'lower', 2, 2, A, 2, B, 2 );\n* // B => <Float64Array>[ 1.0, 0.0, 3.0, 4.0 ]\n*/\nfunction dlacpy( order, uplo, M, N, A, LDA, B, LDB ) {\n\tvar sa1;\n\tvar sa2;\n\tvar sb1;\n\tvar sb2;\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t\tsb1 = 1;\n\t\tsb2 = LDB;\n\t} else { // order === 'row-major'\n\t\tif ( LDA < N ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be greater than or equal to %d. Value: `%d`.', N, LDA ) );\n\t\t}\n\t\tif ( LDB < N ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be greater than or equal to %d. Value: `%d`.', N, LDB ) );\n\t\t}\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t\tsb1 = LDB;\n\t\tsb2 = 1;\n\t}\n\treturn base( uplo, M, N, A, sa1, sa2, 0, B, sb1, sb2, 0 );\n}\n\n\n// EXPORTS //\n\nexport default dlacpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dlacpy from './dlacpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dlacpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dlacpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Copies all or part of a matrix `A` to another matrix `B` using alternative indexing semantics.\n*\n* @param {string} uplo - specifies whether to copy the upper or lower triangular/trapezoidal part of matrix `A`\n* @param {NonNegativeInteger} M - number of rows in matrix `A`\n* @param {NonNegativeInteger} N - number of columns in matrix `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} B - output matrix\n* @param {integer} strideB1 - stride of the first dimension of `B`\n* @param {integer} strideB2 - stride of the second dimension of `B`\n* @param {NonNegativeInteger} offsetB - starting index for `B`\n* @returns {Float64Array} `B`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 0.0, 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( [ 0.0, 0.0, 11.0, 312.0, 53.0, 412.0 ] );\n*\n* dlacpy( 'all', 2, 2, A, 2, 1, 1, B, 2, 1, 2 );\n* // B => <Float64Array>[ 0.0, 0.0, 1.0, 2.0, 3.0, 4.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 0.0, 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( [ 0.0, 0.0, 11.0, 312.0, 53.0, 412.0 ] );\n*\n* dlacpy( 'upper', 2, 2, A, 2, 1, 1, B, 2, 1, 2 );\n* // B => <Float64Array>[ 0.0, 0.0, 1.0, 2.0, 53.0, 4.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 0.0, 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( [ 0.0, 0.0, 11.0, 312.0, 53.0, 412.0 ] );\n*\n* dlacpy( 'lower', 2, 2, A, 2, 1, 1, B, 2, 1, 2 );\n* // B => <Float64Array>[ 0.0, 0.0, 1.0, 312.0, 3.0, 4.0 ]\n*/\nfunction dlacpy( uplo, M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB ) { // eslint-disable-line max-len, max-params\n\treturn base( uplo, M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dlacpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* LAPACK routine to copy all or part of a matrix `A` to another matrix `B`.\n*\n* @module @stdlib/lapack-base-dlacpy\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import dlacpy from '@stdlib/lapack-base-dlacpy';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( 4 );\n*\n* dlacpy( 'row-major', 'all', 2, 2, A, 2, B, 2 );\n* // B => <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import dlacpy from '@stdlib/lapack-base-dlacpy';\n*\n* var A = new Float64Array( [ 0.0, 1.0, 2.0, 3.0, 4.0 ] );\n* var B = new Float64Array( [ 0.0, 0.0, 11.0, 312.0, 53.0, 412.0 ] );\n*\n* dlacpy.ndarray( 'all', 2, 2, A, 2, 1, 1, B, 2, 1, 2 );\n* // B => <Float64Array>[ 0.0, 0.0, 1.0, 2.0, 3.0, 4.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils-try-require';\nimport isError from '@stdlib/assert-is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dlacpy;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdlacpy = main;\n} else {\n\tdlacpy = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dlacpy;\n\n// exports: { \"ndarray\": \"dlacpy.ndarray\" }\n","export default '/home/runner/work/lapack-base-dlacpy/lapack-base-dlacpy/lib'"],"names":["dlacpy","uplo","M","N","A","strideA1","strideA2","offsetA","B","strideB1","strideB2","offsetB","ia","ib","i0","i1","isRowMajor","min","copyUpper","copyLower","da0","da1","db0","db1","sh","S0","S1","sa","sb","o","loopOrder","sx","sy","copyAll","order","LDA","LDB","sa1","sa2","sb1","sb2","isLayout","TypeError","format","RangeError","base","setReadOnly","tmp","tryRequire","join","require$$0","dlacpy$1","isError","main"],"mappings":"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"}